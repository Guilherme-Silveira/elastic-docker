version: '3.2'

services:
  setup:
    container_name: setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELK_VERSION}
    init: true
    volumes:
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    image: elasticsearch
    container_name: elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTIC_PASSWORD:-} -s http://elasticsearch:9200/_cluster/health?wait_for_status=yellow&timeout=500ms"]
      retries: 300
      interval: 1s
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx2048m -Xms2048m"
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  ent-search:
    image: enterprise-search
    container_name: enterprise-search
    build:
      context: enterprise-search/
      args:
        ELK_VERSION: $ELK_VERSION
    restart: unless-stopped
    depends_on:
      - "elasticsearch"
    environment:
      - "JAVA_OPTS=-Xms512m -Xmx512m"
      - "ENT_SEARCH_DEFAULT_PASSWORD=changeme"
      - "elasticsearch.username=elastic"
      - "elasticsearch.password=${ELASTIC_PASSWORD:-}"
      - "elasticsearch.host=http://elasticsearch:9200"
      - "allow_es_settings_modification=true"
      - "secret_management.encryption_keys=[4a2cd3f81d39bf28738c10db0ca782095ffac07279561809eecc722e0c20eb09]"
      - "elasticsearch.startup_retry.interval=15"
    ports:
      - 3002:3002
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    image: logstash
    container_name: logstash
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline/single-node
        target: /usr/share/logstash/pipeline
        read_only: true
      - type: bind
        source: ./drivers
        target: /usr/share/logstash/drivers
        read_only: true
    ports:
      - "5044:5044"
      #- "5001:5000/tcp"
      #- "5001:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    image: kibana
    container_name: kibana
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTIC_PASSWORD:-} -s http://kibana:5601/api/status | grep 'All services are available'"]
      retries: 300
      interval: 1s
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch
      - ent-search

  fleet-server:
    container_name: fleet-server
    hostname: fleet-server
    image: elastic-agent
    build:
      context: fleet-server/
      args:
        ELK_VERSION: $ELK_VERSION
    ports:
      - 8200:8200
      - 8220:8220
    environment:
      FLEET_SERVER_ENABLE: "1"
      FLEET_SERVER_POLICY_ID: "fleet-server"
      FLEET_SERVER_HOST: "0.0.0.0"
      FLEET_SERVER_PORT: "8220"
      FLEET_SERVER_ELASTICSEARCH_HOST: http://elasticsearch:9200
      FLEET_SERVER_ELASTICSEARCH_USERNAME: "${ES_SUPERUSER_USER:-elastic}"
      FLEET_SERVER_ELASTICSEARCH_PASSWORD: "${ELASTIC_PASSWORD:-}"
      KIBANA_FLEET_HOST: "http://kibana:5601"
      KIBANA_FLEET_USERNAME: "${ES_SUPERUSER_USER:-elastic}"
      KIBANA_FLEET_PASSWORD: "${ELASTIC_PASSWORD:-}"
      FLEET_INSECURE: "true"
      FLEET_SERVER_INSECURE_HTTP: "true"
    volumes:
      - type: volume
        source: agent-data
        target: /usr/share/elastic-agent/state
    depends_on:
      elasticsearch: { condition: service_healthy }
      kibana: { condition: service_healthy }
    networks:
      - elk
  ###### Legacy APM Server ######
  #apm-server:
  #  image: apm-server
  #  container_name: apm-server
  #  build:
  #    context: apm-server/
  #    args:
  #      ELK_VERSION: $ELK_VERSION
  #  cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
  #  cap_drop: ["ALL"]
  #  ports:
  #  - 8200:8200
  #  environment:
  #    ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
  #  command: >
  #     apm-server -e
  #       -E apm-server.rum.enabled=true
  #       -E setup.template.settings.index.number_of_replicas=0
  #       -E output.elasticsearch.hosts=["elasticsearch:9200"]
  #       -E output.elasticsearch.username=elastic
  #       -E output.elasticsearch.password=${ELASTIC_PASSWORD}
  #  networks:
  #    - elk
  #  depends_on:
  #    - elasticsearch

networks:
  elk:
    name: elk
    driver: bridge
volumes:
  elasticsearch:
    name: elasticsearch
  setup:
    name: setup
  agent-data:
    name: agent-data
